import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { LoggingService } from './feature-log/logging.service';
import { NotificationService } from './feature-notify/notification.service';
import * as i0 from "@angular/core";
export class GlobalErrorHandler {
    constructor(injector) {
        this.injector = injector;
    }
    handleError(error) {
        const logger = this.injector.get(LoggingService);
        const notifier = this.injector.get(NotificationService);
        let errorDesc;
        if (error instanceof HttpErrorResponse) { // Server error
            errorDesc = this.getServerError(error);
        }
        else { // Client Error
            errorDesc = this.getClientError(error);
        }
        notifier.notify({ message: errorDesc.message });
        // Always log errors
        logger.logError(errorDesc.message); //errorDesc.stackTrace);
    }
    getServerError(error) {
        if (navigator.onLine) {
            return { message: error.message, stackTrace: error.error };
        }
        else {
            return { message: 'No Internet Connection', stackTrace: '' };
        }
    }
    getClientError(error) {
        if (error.message) {
            return { message: error.message, stackTrace: error.stack };
        }
        else {
            return { message: error.toString(), stackTrace: '' };
        }
    }
}
GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) { return new (t || GlobalErrorHandler)(i0.ɵɵinject(i0.Injector)); };
GlobalErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ token: GlobalErrorHandler, factory: GlobalErrorHandler.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(GlobalErrorHandler, [{
        type: Injectable
    }], function () { return [{ type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLWVycm9yLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9ub3RpZmljYXRpb24taGFuZGxlci9zcmMvbGliL2dsb2JhbC1lcnJvci1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7QUFVNUUsTUFBTSxPQUFPLGtCQUFrQjtJQUU3QixZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUksQ0FBQztJQUUzQyxXQUFXLENBQUMsS0FBZ0M7UUFFMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQWlCLGNBQWMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFzQixtQkFBbUIsQ0FBQyxDQUFDO1FBRTdFLElBQUksU0FBb0IsQ0FBQztRQUN6QixJQUFJLEtBQUssWUFBWSxpQkFBaUIsRUFBRSxFQUFFLGVBQWU7WUFDdkQsU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEM7YUFBTSxFQUFFLGVBQWU7WUFDdEIsU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEM7UUFDRCxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBRTlDLG9CQUFvQjtRQUNwQixNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtJQUM5RCxDQUFDO0lBRU8sY0FBYyxDQUFDLEtBQXdCO1FBQzdDLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNwQixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1RDthQUFNO1lBQ0wsT0FBTyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUM7U0FDOUQ7SUFDSCxDQUFDO0lBRU8sY0FBYyxDQUFDLEtBQVk7UUFDakMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzVEO2FBQU07WUFDTCxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUM7U0FDdEQ7SUFDSCxDQUFDOztvRkFuQ1Usa0JBQWtCOzBEQUFsQixrQkFBa0IsV0FBbEIsa0JBQWtCO2tEQUFsQixrQkFBa0I7Y0FEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9nZ2luZ1NlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmUtbG9nL2xvZ2dpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9mZWF0dXJlLW5vdGlmeS9ub3RpZmljYXRpb24uc2VydmljZSc7XG5cbi8vIFRPRE8gYWN0aXZlIHRoaXMgbW9kdWxlXG5cbmludGVyZmFjZSBFcnJvckluZm8ge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHN0YWNrVHJhY2U6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdsb2JhbEVycm9ySGFuZGxlciBpbXBsZW1lbnRzIEVycm9ySGFuZGxlciB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHsgfVxuXG4gIGhhbmRsZUVycm9yKGVycm9yOiBFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlKTogdm9pZCB7XG5cbiAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmluamVjdG9yLmdldDxMb2dnaW5nU2VydmljZT4oTG9nZ2luZ1NlcnZpY2UpO1xuICAgIGNvbnN0IG5vdGlmaWVyID0gdGhpcy5pbmplY3Rvci5nZXQ8Tm90aWZpY2F0aW9uU2VydmljZT4oTm90aWZpY2F0aW9uU2VydmljZSk7XG5cbiAgICBsZXQgZXJyb3JEZXNjOiBFcnJvckluZm87XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHsgLy8gU2VydmVyIGVycm9yXG4gICAgICBlcnJvckRlc2MgPSB0aGlzLmdldFNlcnZlckVycm9yKGVycm9yKTtcbiAgICB9IGVsc2UgeyAvLyBDbGllbnQgRXJyb3JcbiAgICAgIGVycm9yRGVzYyA9IHRoaXMuZ2V0Q2xpZW50RXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBub3RpZmllci5ub3RpZnkoe21lc3NhZ2U6IGVycm9yRGVzYy5tZXNzYWdlfSk7XG5cbiAgICAvLyBBbHdheXMgbG9nIGVycm9yc1xuICAgIGxvZ2dlci5sb2dFcnJvcihlcnJvckRlc2MubWVzc2FnZSk7IC8vZXJyb3JEZXNjLnN0YWNrVHJhY2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZXJ2ZXJFcnJvcihlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBFcnJvckluZm8ge1xuICAgIGlmIChuYXZpZ2F0b3Iub25MaW5lKSB7XG4gICAgICByZXR1cm4geyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLCBzdGFja1RyYWNlOiBlcnJvci5lcnJvciB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyBtZXNzYWdlOiAnTm8gSW50ZXJuZXQgQ29ubmVjdGlvbicsIHN0YWNrVHJhY2U6ICcnIH07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRDbGllbnRFcnJvcihlcnJvcjogRXJyb3IpOiBFcnJvckluZm8ge1xuICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICByZXR1cm4geyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLCBzdGFja1RyYWNlOiBlcnJvci5zdGFjayB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyBtZXNzYWdlOiBlcnJvci50b1N0cmluZygpLCBzdGFja1RyYWNlOiAnJyB9O1xuICAgIH1cbiAgfVxufVxuIl19