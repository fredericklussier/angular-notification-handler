import { Injectable } from '@angular/core';
import { NotificationHandlerComponent } from './notification-handler/notification-handler.component';
import { NotificationStyle } from './notifycation-style.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material//snack-bar";
const dismissibleNotificationStyle = [
    NotificationStyle.error,
    NotificationStyle.warn,
];
export class NotificationService {
    constructor(snackBar) {
        this.snackBar = snackBar;
    }
    notify(notificationInfo) {
        const data = this.setDateWithDefault(notificationInfo);
        const options = this.setOptionsWithDefault(notificationInfo);
        this.snackBar.openFromComponent(NotificationHandlerComponent, Object.assign({ data }, options));
    }
    setDateWithDefault(notificationInfo) {
        return {
            message: notificationInfo.message,
            allowDismiss: notificationInfo.allowDismiss || dismissibleNotificationStyle.toString().includes(notificationInfo.kind),
        };
    }
    setOptionsWithDefault(notificationInfo) {
        var _a;
        const options = Object.assign({}, Object.assign({ duration: 2500 }, notificationInfo.options));
        options.panelClass = notificationInfo.kind
            ? [notificationInfo.kind]
            : [NotificationStyle.default];
        options.panelClass = ((_a = notificationInfo.options) === null || _a === void 0 ? void 0 : _a.panelClass) ? [...options.panelClass, ...notificationInfo.options.panelClass]
            : options.panelClass;
        return options;
    }
}
NotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(i0.ɵɵinject(i1.MatSnackBar)); };
NotificationService.ɵprov = i0.ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable
    }], function () { return [{ type: i1.MatSnackBar }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9ub3RpZmljYXRpb24taGFuZGxlci9zcmMvbGliL2ZlYXR1cmUtbm90aWZ5L25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDckcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7OztBQUU5RCxNQUFNLDRCQUE0QixHQUFHO0lBQ25DLGlCQUFpQixDQUFDLEtBQUs7SUFDdkIsaUJBQWlCLENBQUMsSUFBSTtDQUN2QixDQUFDO0FBR0YsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFvQixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQUcsQ0FBQztJQUU3QyxNQUFNLENBQUMsZ0JBQWtDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsNEJBQTRCLGtCQUMxRCxJQUFJLElBQ0QsT0FBTyxFQUNWLENBQUM7SUFDTCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsZ0JBQWtDO1FBQzNELE9BQU87WUFDTCxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsT0FBTztZQUNqQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxJQUFJLDRCQUE0QixDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7U0FDdkgsQ0FBQztJQUNKLENBQUM7SUFFTyxxQkFBcUIsQ0FDM0IsZ0JBQWtDOztRQUVsQyxNQUFNLE9BQU8scUNBRVQsUUFBUSxFQUFFLElBQUksSUFDWCxnQkFBZ0IsQ0FBQyxPQUFPLEVBRTlCLENBQUM7UUFDRixPQUFPLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDLElBQUk7WUFDeEMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWhDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsT0FBQSxnQkFBZ0IsQ0FBQyxPQUFPLDBDQUFFLFVBQVUsRUFDdkQsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUNqRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUV2QixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztzRkF0Q1UsbUJBQW1COzJEQUFuQixtQkFBbUIsV0FBbkIsbUJBQW1CO2tEQUFuQixtQkFBbUI7Y0FEL0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkluZm8gfSBmcm9tICcuL25vdGlmaWNhdGlvbi1JbmZvLmludGVyZmFjZSc7XG5pbXBvcnQgeyBNYXRTbmFja0JhciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsLy9zbmFjay1iYXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uSGFuZGxlckNvbXBvbmVudCB9IGZyb20gJy4vbm90aWZpY2F0aW9uLWhhbmRsZXIvbm90aWZpY2F0aW9uLWhhbmRsZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblN0eWxlIH0gZnJvbSAnLi9ub3RpZnljYXRpb24tc3R5bGUuZW51bSc7XG5cbmNvbnN0IGRpc21pc3NpYmxlTm90aWZpY2F0aW9uU3R5bGUgPSBbXG4gIE5vdGlmaWNhdGlvblN0eWxlLmVycm9yLFxuICBOb3RpZmljYXRpb25TdHlsZS53YXJuLFxuXTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWNrQmFyOiBNYXRTbmFja0Jhcikge31cblxuICBub3RpZnkobm90aWZpY2F0aW9uSW5mbzogTm90aWZpY2F0aW9uSW5mbyk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnNldERhdGVXaXRoRGVmYXVsdChub3RpZmljYXRpb25JbmZvKTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5zZXRPcHRpb25zV2l0aERlZmF1bHQobm90aWZpY2F0aW9uSW5mbyk7XG5cbiAgICB0aGlzLnNuYWNrQmFyLm9wZW5Gcm9tQ29tcG9uZW50KE5vdGlmaWNhdGlvbkhhbmRsZXJDb21wb25lbnQsIHtcbiAgICAgIGRhdGEsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXREYXRlV2l0aERlZmF1bHQobm90aWZpY2F0aW9uSW5mbzogTm90aWZpY2F0aW9uSW5mbyk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IG5vdGlmaWNhdGlvbkluZm8ubWVzc2FnZSxcbiAgICAgIGFsbG93RGlzbWlzczogbm90aWZpY2F0aW9uSW5mby5hbGxvd0Rpc21pc3MgfHwgZGlzbWlzc2libGVOb3RpZmljYXRpb25TdHlsZS50b1N0cmluZygpLmluY2x1ZGVzKG5vdGlmaWNhdGlvbkluZm8ua2luZCksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0T3B0aW9uc1dpdGhEZWZhdWx0KFxuICAgIG5vdGlmaWNhdGlvbkluZm86IE5vdGlmaWNhdGlvbkluZm9cbiAgKTogYW55IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4ue1xuICAgICAgICBkdXJhdGlvbjogMjUwMCxcbiAgICAgICAgLi4ubm90aWZpY2F0aW9uSW5mby5vcHRpb25zLFxuICAgICAgfSxcbiAgICB9O1xuICAgIG9wdGlvbnMucGFuZWxDbGFzcyA9IG5vdGlmaWNhdGlvbkluZm8ua2luZFxuICAgICAgPyBbbm90aWZpY2F0aW9uSW5mby5raW5kXVxuICAgICAgOiBbTm90aWZpY2F0aW9uU3R5bGUuZGVmYXVsdF07XG5cbiAgICBvcHRpb25zLnBhbmVsQ2xhc3MgPSBub3RpZmljYXRpb25JbmZvLm9wdGlvbnM/LnBhbmVsQ2xhc3NcbiAgICAgID8gWy4uLm9wdGlvbnMucGFuZWxDbGFzcywgLi4ubm90aWZpY2F0aW9uSW5mby5vcHRpb25zLnBhbmVsQ2xhc3NdXG4gICAgICA6IG9wdGlvbnMucGFuZWxDbGFzcztcblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG59XG4iXX0=