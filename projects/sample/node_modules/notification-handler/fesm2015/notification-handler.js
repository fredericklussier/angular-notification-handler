import { ɵɵdefineInjectable, ɵsetClassMetadata, Injectable, ɵɵgetCurrentView, ɵɵelementStart, ɵɵlistener, ɵɵrestoreView, ɵɵnextContext, ɵɵtext, ɵɵelementEnd, ɵɵdirectiveInject, ɵɵdefineComponent, ɵɵtemplate, ɵɵadvance, ɵɵtextInterpolate1, ɵɵproperty, Component, Inject, ɵɵinject, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';
import { MatSnackBarRef, MAT_SNACK_BAR_DATA, MatSnackBarModule } from '@angular/material/snack-bar';
import { NgIf, CommonModule } from '@angular/common';
import { MatButton, MatButtonModule } from '@angular/material/button';
import { MatIcon, MatIconModule } from '@angular/material/icon';
import { MatSnackBar } from '@angular/material//snack-bar';

// TODO: Log error to the server like Rollbar or Crashlytics
// TODO: treat the stack when error occurs
// TODO: set the application name
class LoggingService {
    logError(message) {
        console.error(this.formatMessage(message));
    }
    logWarning(message) {
        console.warn(this.formatMessage(message));
    }
    logInformation(message) {
        console.log(`Info: ${this.formatMessage(message)}`);
    }
    logIt(message) {
        console.log(this.formatMessage(message));
    }
    formatMessage(message) {
        const now = new Date();
        return `${now.toLocaleString()}: LoggingService: ${message}`;
    }
}
LoggingService.ɵfac = function LoggingService_Factory(t) { return new (t || LoggingService)(); };
LoggingService.ɵprov = ɵɵdefineInjectable({ token: LoggingService, factory: LoggingService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(LoggingService, [{
        type: Injectable
    }], null, null); })();

function NotificationHandlerComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 3);
    ɵɵelementStart(1, "button", 4);
    ɵɵlistener("click", function NotificationHandlerComponent_div_3_Template_button_click_1_listener() { ɵɵrestoreView(_r2); const ctx_r1 = ɵɵnextContext(); return ctx_r1.snackBarRef.dismiss(); });
    ɵɵelementStart(2, "mat-icon");
    ɵɵtext(3, "close");
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
// TODO ngMAterial change the way to work with color (.inform => background-color: primary; )
class NotificationHandlerComponent {
    constructor(snackBarRef, data) {
        this.snackBarRef = snackBarRef;
        this.data = data;
    }
}
NotificationHandlerComponent.ɵfac = function NotificationHandlerComponent_Factory(t) { return new (t || NotificationHandlerComponent)(ɵɵdirectiveInject(MatSnackBarRef), ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };
NotificationHandlerComponent.ɵcmp = ɵɵdefineComponent({ type: NotificationHandlerComponent, selectors: [["ngy-notification-handler"]], decls: 4, vars: 2, consts: [[1, "container"], [2, "margin-left", "8px", "margin-right", "8px"], ["class", "dismiss", 4, "ngIf"], [1, "dismiss"], ["mat-mini-fab", "", 3, "click"]], template: function NotificationHandlerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "div", 1);
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵtemplate(3, NotificationHandlerComponent_div_3_Template, 4, 0, "div", 2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵtextInterpolate1(" ", ctx.data.message, " ");
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.data.allowDismiss);
    } }, directives: [NgIf, MatButton, MatIcon], styles: [".container[_ngcontent-%COMP%]{align-items:center;display:flex;flex-direction:row}.dismiss[_ngcontent-%COMP%]{margin-left:auto}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NotificationHandlerComponent, [{
        type: Component,
        args: [{
                selector: 'ngy-notification-handler',
                templateUrl: './notification-handler.component.html',
                styleUrls: ['./notification-handler.component.scss'],
            }]
    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_SNACK_BAR_DATA]
            }] }]; }, null); })();

var NotificationStyle;
(function (NotificationStyle) {
    NotificationStyle["default"] = "default-notification-overlay";
    NotificationStyle["error"] = "error-notification-overlay";
    NotificationStyle["success"] = "success-notification-overlay";
    NotificationStyle["info"] = "info-notification-overlay";
    NotificationStyle["warn"] = "warning-notification-overlay";
})(NotificationStyle || (NotificationStyle = {}));

const dismissibleNotificationStyle = [
    NotificationStyle.error,
    NotificationStyle.warn,
];
class NotificationService {
    constructor(snackBar) {
        this.snackBar = snackBar;
    }
    notify(notificationInfo) {
        const data = this.setDateWithDefault(notificationInfo);
        const options = this.setOptionsWithDefault(notificationInfo);
        this.snackBar.openFromComponent(NotificationHandlerComponent, Object.assign({ data }, options));
    }
    setDateWithDefault(notificationInfo) {
        return {
            message: notificationInfo.message,
            allowDismiss: notificationInfo.allowDismiss || dismissibleNotificationStyle.toString().includes(notificationInfo.kind),
        };
    }
    setOptionsWithDefault(notificationInfo) {
        var _a;
        const options = Object.assign({}, Object.assign({ duration: 2500 }, notificationInfo.options));
        options.panelClass = notificationInfo.kind
            ? [notificationInfo.kind]
            : [NotificationStyle.default];
        options.panelClass = ((_a = notificationInfo.options) === null || _a === void 0 ? void 0 : _a.panelClass) ? [...options.panelClass, ...notificationInfo.options.panelClass]
            : options.panelClass;
        return options;
    }
}
NotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(ɵɵinject(MatSnackBar)); };
NotificationService.ɵprov = ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NotificationService, [{
        type: Injectable
    }], function () { return [{ type: MatSnackBar }]; }, null); })();

class NotificationHandlerFacadeService {
    constructor(loggingService, notificationService) {
        this.loggingService = loggingService;
        this.notificationService = notificationService;
    }
    /**
     * LoggingService
     */
    logInformation(message) {
        return this.loggingService.logInformation(message);
    }
    logError(message) {
        return this.loggingService.logError(message);
    }
    logWarning(message) {
        return this.loggingService.logWarning(message);
    }
    logIt(message) {
        return this.loggingService.logIt(message);
    }
    /**
     * NotificationService
     */
    notify(notificationInfo) {
        return this.notificationService.notify(notificationInfo);
    }
}
NotificationHandlerFacadeService.ɵfac = function NotificationHandlerFacadeService_Factory(t) { return new (t || NotificationHandlerFacadeService)(ɵɵinject(LoggingService), ɵɵinject(NotificationService)); };
NotificationHandlerFacadeService.ɵprov = ɵɵdefineInjectable({ token: NotificationHandlerFacadeService, factory: NotificationHandlerFacadeService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NotificationHandlerFacadeService, [{
        type: Injectable
    }], function () { return [{ type: LoggingService }, { type: NotificationService }]; }, null); })();

class NotificationHandlerModule {
}
NotificationHandlerModule.ɵmod = ɵɵdefineNgModule({ type: NotificationHandlerModule });
NotificationHandlerModule.ɵinj = ɵɵdefineInjector({ factory: function NotificationHandlerModule_Factory(t) { return new (t || NotificationHandlerModule)(); }, providers: [
        LoggingService,
        NotificationService,
        NotificationHandlerFacadeService
    ], imports: [[
            CommonModule,
            MatSnackBarModule,
            MatButtonModule,
            MatIconModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NotificationHandlerModule, { declarations: [NotificationHandlerComponent], imports: [CommonModule,
        MatSnackBarModule,
        MatButtonModule,
        MatIconModule] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NotificationHandlerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NotificationHandlerComponent
                ],
                imports: [
                    CommonModule,
                    MatSnackBarModule,
                    MatButtonModule,
                    MatIconModule,
                ],
                providers: [
                    LoggingService,
                    NotificationService,
                    NotificationHandlerFacadeService
                ],
                exports: [],
                entryComponents: [NotificationHandlerComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of notification-handler
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NotificationHandlerFacadeService, NotificationHandlerModule, NotificationStyle };
//# sourceMappingURL=notification-handler.js.map
